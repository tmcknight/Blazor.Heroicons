@inherits HeroiconBase
@if (_razorComponentType is not null)
{
    <DynamicComponent Type="_razorComponentType" Parameters="AdditionalAttributes"></DynamicComponent>
}
else
{
    <Blazor.Heroicons.Outline.QuestionMarkCircleIcon @attributes="AdditionalAttributes" />
}

@code {
    /// <summary>
    /// The name of the icon. Default: <see cref="HeroiconName.Sparkles"/>.
    /// </summary>
    [Parameter] public string Name { get; set; } = HeroiconName.Sparkles;

    /// <summary>
    /// The type of icon. Default: <see cref="HeroiconType.Outline"/>.
    /// </summary>
    [Parameter] public HeroiconType Type { get; set; } = HeroiconType.Outline;

    private HeroiconType _heroiconType;
    private Type? _razorComponentType;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //remove hyphens and spaces
        var name = Name.Replace("-", "").Replace(" ", "");
        //add icon suffix, if not included
        if (!name.ToLower().EndsWith("icon"))
        {
            name = $"{name}Icon";
        }

        //check to see if the icon parameters have changed
        if (_razorComponentType is null ||
        _razorComponentType.Name.ToLower() != name.ToLower() ||
        _heroiconType != Type)
        {
            //find icon based on name and type
            _razorComponentType = System.Type.GetType($"Blazor.Heroicons.{Type}.{name}", false, true)!;
            _heroiconType = Type;
        }
    }

}